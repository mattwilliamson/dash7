Numbers here are related to the DRAFT 014

x.1 Overview
x.2 Device class
x.3 physical layer
    The work continues from here. The interface with the sx are already very well developed and there is a code that starts to implement the phy.
    However some adaptations can be done.
    - The background class don't use the first byte as the size, making it incompatible with the "variable length packet format", to support it we'll have
      to use the "unlimited length packet format"
    - The foreground class packet can be formed by more than one frame, so it can reach more than 255byte. In this case we'll also have to use the
      "unimited length packet"
    - By changing the packet mode, we'll have to recognize start and end from the packet by hand
    - We'll also have to check for the CRC16 by hand
    - FEC isn't done, but the spec doesn't recomend it (neither people from wizzilab). There is a significant lost in performance in exchange
      for little error correction. I'll leave this one behind.
    - Since we'll have to controll the size of the packet by hand, we'll have to bring some information from the data layer to the phy, to simplify things
      we can make the phy deal with frames and not packets.
    - CA was already done =)
    - Some parameters can be derived by the others (like sync words and size of the preamble), so it would be nice to make an interface where the user
      will give only the main elements and we can derivate the others from them.

x.4 Data Link layer
    Now things get intresting. This layer specifies a lot of protocols that need to be respected.
    - They give us a huge list of parameters but there will be only a small part of it that will change in runtime.
      These are the ones tied with channel configuration.
    - Functions that will implement this layer will be used instead of the ones from the phy to help following those protocols.
    - CRC filtering is already done by the phy, CRC32 is said to be only experimental, we'll leave that behind. Subnet filter is not done
      yet, Link Quality Assessment neither do it.
    - Keep in mind addressing, but they just be used significantly later. For now, keep in mind they are part of the header
    - Frame handling. The options would be working with fixed structures and vectoring them when we need to send or receive, or
      work with them already vectored, I'll try to go for the seccond option since Foreground frame can become a memory burden if
      we represent it each time by a fixed structure. So, do functions that will allow us to retrieve or insert atributes in vector frames
    - Dialog models: background has nothing special, foreground get's intresting. There will be idle time during the dialogs, try to explore it!
      leaving them to background tasks will be easy, share the sx during this time won´t be so mush (need to check how I'll handle frames and
      try to play with the different timings to see how it'll work)
    - Scanning! I really think that this is where the dash7 shines the most, the background frames scanning is really something (and it's simple)
      There isn't mush to this part, we can use what was ready from the phy =)
    - MAC scan: Basecally using the scanning part but for multiple objectives. I believe this can be really well done if we create things in a way to don't make
      this a list scan, but more independent tasks that play with the clock. It won't be that hard to do it using Chibios.
    - Mac reception: pretty mush what is in the phy.
    - Channel guarding is a nice feature too! it allows dialog to flow and also to reduce communication time by removing some of the CA, make it in a way
      that the guarding will be transparent for the user. We can do it toguether with the CSMA, and we can create different functions to be used by the user
      that can be used for controlling the flow of events.
    - Mac transmission: Beacons! reminds me of the wadeds, but so far I don't thing dash7 and waded are something that should go toguether =(
      This part is pretty mush discussed in the others, so by the point we'll get here, there won't be mush to do about it.
    - Host controll - bla
    - Foreground Frame are huge, I don't think we'll be supporting every single feature. TX eirp and adressing is a must though. This well be just
      vector manipulations and won't get in the way of the transmission and reception. just when we get to the closed hoping protocol =(
 
These first two parts need to be very solid! The rest of the dash7 depends a lot on them.

x.5 Background Network protocols
    - If the above was done right, this will be no problem, since they are mostly background packets with a special configuration.
    - M2AdvP blew my mind! This will be a must for the implementation, since it's what allows the nodes to save most of their energy.
      We'll use the MAC background scan do receive the call and prepare the hardware to awake. Be prepared here to deal with some timing issues.
    - M2ResP, they say that no one does it... and I don't really understand the meaning behing it either. 

x.6 Foreground Network protocols
    - M2DP is just a simple foreground frame ¬¬
    - M2NP The hop alone is a great idea to add to the implementation, but I don't think I understood it very well, and if I did, they said that
      the algorithm they use is proprietary.

x.10 
I'll give some atention to this section because it's a file system. This will be an interesting usage of the fram.
Most of the things that are done in the phy and data layer can be stored and configured here.
